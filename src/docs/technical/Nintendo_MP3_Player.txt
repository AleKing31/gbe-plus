Nintendo MP3 Player Technical Documentation 0.1
October 30, 2023
Shonumi aka D.S. Baxter


***************************************************
1. Introduction
*************************************************** 

Following in the footsteps of the original Play-Yan and Play-Yan Micro, the Nintendo MP3 Player was launched in Europe on December 8, 2006. This unique cartridge was very similar to other products in the AGS-006 lineup. Now, however, the device played MP3 music files exclusively, getting rid of any video playback components. Due to this change, the underlying hardware and software had significant differences from the earlier Play-Yans.


***************************************************
2. General Hardware Information
***************************************************

- Features a normal-sized SD card reader.
- Can handle card capacities up to 2GB, depending on the manufacturer.
- Not compatible with SDHC, SDXC, or SDUC cards.
- Uses hardware decoding. Not an Alpha Mosaic VC01 like previous Play-Yan models.
- Uploads firmware on boot, and can optionally update with the correct files on an SD card.
- Features a slightly larger than normal cartridge shell.
- Has a 3.5mm audio jack to output sound and bypass the GBA's speakers.
- Can parse some ID3 tags (ID3v1, ID3v1.1, ID3v2, and mixed ID3v1/ID3v2 tags).
- Supports MP3 bits rates of 32k to 320k bps, CBR, VBR, and ABR.
- Supports sampling frequencies of 8KHz to 48KHz.


***************************************************
3. Hardware Registers
***************************************************

The Nintendo MP3 Player uses a very small selection of registers in the 0xE000000 memory region, relying on serial reads and writes to access firmware, send commands, and handle audio playback.

----------------------------------------------------------------------------------------------------------------------
Hardware Register	|  Address	| Description
----------------------------------------------------------------------------------------------------------------------
NMP_CONTROL		| 0xE000000	| Control register used to issue commands and send data to the cartridge.
NMP_DATA_IN		| 0xE004000 	| Input data for the cartridge.
NMP_DATA_OUT		| 0xE006000	| Output data from the cartridge.
NMP_PARAMETER		| 0xE008000	| Selects data indices and commands.
----------------------------------------------------------------------------------------------------------------------

All registers are 16-bit and MSB first. As such, care must be taken when reading/writing with hardware that is LSB-based (such as the GBA's ARM7 CPU). Additionally, due to the serial nature of the registers, the lower value must always be read/written first. The NMP's software, resorts to accessing these registers one byte at a time (e.g. 0xE000000 first, then 0xE000001) to resolve both issues.


***************************************************
4. Accessing Firmware
***************************************************

Like the original Play-Yan and Play-Yan Micro, the NMP loads default firmware from the cartridge's ROM onto special hardware inside the device. This ensures a baseline, working version of the firmware necessary to decode MP3s is always present, especially in case a firmware upgrade goes awry. To write firmware, the software first sets an index, presumably representing a location in internal memory where the firmware resides. Afterwards, it starts writing values. The index itself is expressed in terms of 16-bit units, so the absolute memory location is twice the value of the index.

The following process is used to access firmware:

------------------------------------------------------------------------
NMP_CONTROL_LO = 0x10
NMP_CONTROL_HI = 0x10

NMP_PARAMATER_LO = INPUT_PARAMETER_HI
NMP_PARAMETER_HI = INPUT_PARAMETER_LO

NMP_CONTROL_LO = 0x00
NMP_CONTROL_HI = 0x00

NMP_PARAMATER_LO = INDEX_HI
NMP_PARAMETER_HI = INDEX_LO
------------------------------------------------------------------------

From there, data can be read or written by from either NMP_DATA_IN or NMP_DATA_OUT as 16-bit values. It is currently unknown what purpose the different values of INPUT_PARAMETER serves. Common values appear to be 0x0000 through 0x0003.

Although the Nintendo MP3 Player has the ability to update its firmware just like its Play-Yan predecessors, it's unclear if this was actually ever done for this version. The cartridge specifically looks for a file named "meteor.fup", but it does not appear any such file was ever offered to users by Nintendo.

After the firmware is completely loaded from the NMP's ROM, a single Game Pak IRQ is automatically generated, which begins the boot process, very similar to how the Play-Yan models operate.


***************************************************
5. Indices
***************************************************

While most indices appear to be used for accessing firmware, some have other purposes. These are accessed in a similar manner to firmware. Here, however, the value representing INPUT_PARAMATER is always 0x0000:

------------------------------------------------------------------------
NMP_CONTROL_LO = 0x10
NMP_CONTROL_HI = 0x10

NMP_PARAMATER_LO = 0x00
NMP_PARAMETER_HI = 0x00

NMP_CONTROL_LO = 0x00
NMP_CONTROL_HI = 0x00

NMP_PARAMATER_LO = ACCESS_INDEX_HI
NMP_PARAMETER_HI = ACCESS_INDEX_LO
------------------------------------------------------------------------

A list of known indices and their functions follows:

------------------------------------------------------------------------
Index	| Description
------------------------------------------------------------------------
0x0000	| Access SD Card Data
0x00FF	| Data Flush
0x0100	| Get Game Pak IRQ Status Data
0x0101	| Access ID3 Data
0x010F	| Send Command / Get Ticks
0x0110	| Check Cartridge I/O Busy Flag
0x--0-	| Audio Buffer 1
0x--8-	| Audio Buffer 2
------------------------------------------------------------------------

Index 0x0000 : Access SD Card Data
This index is accessed after issuing a command that expects to receive data from the SD card. That data is available at NMP_DATA_OUT.

Index 0x00FF : Data Flush
This index typically accessed after commands are issued. It seems like it's used to flush input data. After accessing this index, 16-bits are written to NMP_DATA_IN, with the value being 0x0000

Index 0x0100 : Get Game Pak IRQ Status Data
This index is accessed immediately following a Game Pak IRQ. The NMP's software reads 16 bytes of status data from NMP_DATA_OUT related to the recent IRQ. This status data contains the Command ID associated with the IRQ as well as any additional parameters for the command. These parameters are used to update various things such as the music trackbar, music timestamp, fast forward/rewind, speed, volume, etc. Typically, the NMP's software will read the first 8 bytes of status data to determine if it's valid, then proceed to read the entire 16 bytes.

Index 0x0101 : Access ID3 Data
This index is access after issuing the 0x0040 command. Data for ID3 tags is available at NMP_DATA_OUT.

Index 0x010F : Send Command / Get Ticks
This index has two uses when writing to NMP_DATA_OUT and when reading from NMP_DATA_IN. When writing, it is used to send a command. A series of 16-bit values are then written to NMP_DATA_OUT. When reading, this access gets the current internal "ticks" from the NMP. A single 16-bit value is read from NMP_DATA_OUT, which is used as a measurement for time-keeping. For the most part, the NMP's software wants to ensure that the hardware is actually running, i.e. the 16-bit ticks values should increase periodically. The software reads it once per-frame and times out several actions if the ticks haven't advanced for a full second (i.e. during the initial boot phase, it will completely reset everything and try re-uploading firmware).

Index 0x0110 : Check Cartridge I/O Busy Flag
This index is accessed immediately following the last access to 0x0100. It's used to get the cartridge's I/O busy status. After accessing this index, a single 16-bit value from NMP_DATA_OUT is read. Any non-zero values indicate that the cartridge is still busy, presumbly with data from a previous Game Pak IRQ. This index can be accessed indefinitely until NMP_DATA_OUT returns zero, at which point additional commands can be issued.

Index 0x--0- : Audio Buffer 1
This index is access after issuing the 0x0050 command and the NMP generates internal Game Pak IRQs with a Command ID that reads 0x8100. The status data for those internal IRQs will have 16-bit values that determine the exact index the NMP will assign for its audio buffers. This value appears arbitrary, so the index may not have a fixed position. The data is available at NMP_DATA_OUT and represents 8-bit samples compatible with the GBA's DMA sound channels. The buffer is split in half, with the first portion requiring access to this index.

Index 0x--8- : Audio Buffer 2
This index is much the same as Audio Buffer 1. Accessing this will pull up the second portion of the audio buffer, which contains 8-bit samples. The only thing different about this index is its location. When the NMP generates internal Game Pak IRQs with 0x8100 as the Command ID, the 16-bit index representing Audio Buffer 1 is OR'ed with the value 0x0080 to get the index of Audio Buffer 2.  


***************************************************
6. Reading SD Card Data
***************************************************

SD Card Data can be accessed after a Game Pak IRQ is raised in response to a command. Simply access the 0x0000 index and read data from NMP_DATA_OUT. The process is as follows:

------------------------------------------------------------------------
NMP_CONTROL_LO = 0x10
NMP_CONTROL_HI = 0x10

NMP_PARAMATER_LO = 0x00
NMP_PARAMETER_HI = 0x00

NMP_CONTROL_LO = 0x00
NMP_CONTROL_HI = 0x00

NMP_PARAMATER_LO = 0x00
NMP_PARAMETER_HI = 0x00


DATA_BYTE_HI = NMP_DATA_OUT_HI
DATA_BYTE_LO = NMP_DATA_OUT_HI
...
... REPEAT READS AS NECESSARY
...
------------------------------------------------------------------------

Commands expect different lengths of data from the SD Card, so there is no set general set limit. Bytes should be read according to the specific command and its context (e.g. an IRQ with a Command ID of 0x8100 may have variable lengths of bytes to read for the audio buffer).


***************************************************
7. Commands
***************************************************

Commands can be sent to the Nintendo MP3 Player after accessing the 0x010F index. Data consists of a stream of 16-bit words written to NMP_DATA_IN. These commands are responsible for operating nearly everything about the cartridge, from upgrading firmware, reading directory information from the SD card, and playing music. The process of sending a command is as follows:

------------------------------------------------------------------------
NMP_DATA_IN_LO = COMMAND_ID_HI
NMP_DATA_IN_HI = COMMAND_ID_LO

NMP_DATA_IN_LO = PARAMETER_VALUE_HI
NMP_DATA_IN_HI = PARAMETER_VALUE_LO

...

NMP_CONTROL_LO = 0x04
NMP_CONTROL_HI = 0x04
------------------------------------------------------------------------

At a minimum, a command must write its ID and an additional 16-bits of parameter data. Some commands, such as 0x10, use zeroes for their parameter data, and do not seem to require a flush via the 0xFF index. For commands that require more bytes for parameters, that data is simply written accordingly to NMP_DATA_IN. Writing 0x0404 to NMP_CONTROL appears to signal to the cartridge that command input is finished. A list of all known commands and details about them are listed below:

----------------------------------------------------------------------------------------------------------------------------------------------
Command	ID				| Parameters				| SD Card Data
----------------------------------------------------------------------------------------------------------------------------------------------
0x0010 - Begin File/Folder List		|					| 1 File/Folder Entry
0x0011 - Continue File/Folder List	|					| 1 File/Folder Entry
0x0020 - Change Directory		| Directory Name			|
0x0030 - Unknown Command		|					|
0x0040 - Grab ID3 Data			| Music Filename			| ID3 Tags For Title and Artist
0x0050 - Play Music File		| Music Filename			|
0x0051 - Stop Music Playback		|					|
0x0052 - Pause Music Playback		|					|
0x0053 - Resume Music Playback		|					|
0x0060 - Seek Forwards/Backwards	|					|
0x0070 - Unknown Command		|					|
0x0080 - Adjust Volume			| New Volume				|
0x0200 - Play Sound Effect		|					|
0x0300 - Check For Firmware File	| Firmware Upgrade Filename		|
0x0301 - Read Firmware File		|					|
0x0303 - Close Firmware File		|					|
0x0500 - Enter Sleep Mode		|					|
0x0501 - Exit Sleep Mode		|					|
----------------------------------------------------------------------------------------------------------------------------------------------

Sometimes the NMP's hardware will generate Game Pak IRQs on its own. While not exactly commands, these IRQs produce data that can be read in much the same way. That is to say, they'll have a Command ID, Status Data, and SD Card Data if applicable.

----------------------------------------------------------------------------------------------------------------------------------------------
Command	ID				| Parameters				| SD Card Data
----------------------------------------------------------------------------------------------------------------------------------------------
0x8001 - Initialize NMP Hardware	|					|
0x8600 - Headphone Status		| Headphone Plugged-In Flag		|
0x8100 - Update Audio			| Audio Buffer / Trackbar / Timestamp	| Audio Samples
----------------------------------------------------------------------------------------------------------------------------------------------

For any and all ASCII strings sent to or returned by these commands, each character is encoded as a 16-bit MSB value. Each character uses 16-bits. As an example, sending the character "A" for a command parameter involves writing 0x00 to NMP_DATA_IN_LO first, then 0x41 to NMP_DATA_IN_HI later. The overall string is transferred or received from the first character to the last character in order, e.g. the filename "music.mp3" has "m" as the first character and "3" as the final one. Strings must be null terminated as well.

For each Game Pak IRQ, the first 16-bits of Status Data acts as a sort of "ID" for the command used. Typically, this ID is simply the command itself OR'ed with 0x4000 or 0x8000. Once again, this has parallels to how the Play-Yans operate. When the ID has been OR'ed with 0x4000, this means the NMP is directly responding to a command issued by the software and generating an appropiate Game Pak IRQ. IDs OR'ed with 0x8000, on the other hand, represent Game Pak IRQs generated by the NMP itself.

Below is a list of all known commands along with their parameters, Status Data, and their SD Card Data if applicable.





-----------------------------------------------------------------------
Command 0x0010 - Begin File/Folder List
-----------------------------------------------------------------------
Parameters : N/A
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4010
Byte 0x0002 - 0x0003	End of List Flag	0x0000 or 0x0001
-----------------------------------------------------------------------
SD Card Data:

Byte 0x0000 - 0x020B	File/Folder Name	ASCII String
Byte 0x020C - 0x020D	File/Folder Flag	0x01 = Folder, 0x02 = File
Byte 0x020E - 0x020F	N/A			Unused
-----------------------------------------------------------------------

This command begins reading the names of every file and folder in the current directory of the SD card. The starting location on boot is the SD card's root directory. Unlike the Play-Yans, the NMP reads only 1 file or folder at a time rather than grabbing multiple entires all at once. In order to read the names of all files and folders, the 0x0011 command must be called. For any given directory, the 0x0010 command is only issued once.

The Status Data consists of the Command ID and an End of List Flag. If this flag is non-zero, it means a valid file or folder has been found on the filesystem. If this flag reads zero, that means there are no more files or folders within a directory. As this is the first command called when searching for files and folders, this indicates an empty directory.

The SD Card Data reads 528 bytes in all, with the first 524 being reserved for the file or folder's name. Note, however, that the NMP's software will use far less than that. The next 4 bytes after that dictates whether the entry is a file or a folder. Technically any unsigned value less than or equal to 0x01 represents a folder, and any unsigned value greater than or equal to 0x02 represents a file.



-----------------------------------------------------------------------
Command 0x0011 - Continue File/Folder List
-----------------------------------------------------------------------
Parameters : N/A
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4010
Byte 0x0002 - 0x0003	End of List Flag	0x0000 or 0x0001
-----------------------------------------------------------------------
SD Card Data:

Byte 0x0000 - 0x020B	File/Folder Name	ASCII String
Byte 0x020C - 0x020D	File/Folder Flag	0x01 = Folder, 0x02 = File
Byte 0x020E - 0x020F	N/A			Unused
-----------------------------------------------------------------------

This command continues reading the names of every file and folder in the current directory of the SD card. The starting location on boot is the SD card's root directory. Whereas the 0x0010 is called only once for a given directory, the 0x0011 must be called repeatedly until it detects no more files or folders. This is done by checking the End of List Flag in its Status Data. Otherwise, this command is exactly like its counterpart described above.





-----------------------------------------------------------------------
Command 0x0200 - Play Sound Effect
-----------------------------------------------------------------------
Parameters : N/A
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4200
-----------------------------------------------------------------------
SD Card Data: N/A
-----------------------------------------------------------------------

Plays a sound effect during certain actions, such as selecting menus. The sound effect comes from firmware, just like the Play-Yan models. The NMP hardware will convert the sound effect into samples compatible with the GBA. The 0x0200 command only starts this process; an additional Game Pak IRQ is generated with a Command ID of 0x8100, which supplies the audio data via the SD Card interface.





-----------------------------------------------------------------------
Command 0x0300 - Check For Firmware File
-----------------------------------------------------------------------
Parameters :

Byte 0x0000 - 0x0209	Filename		ASCII String
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4300
Byte 0x0002 - 0x0003	File Exists Flag	0x00 = File Found, 0x01 = No File
-----------------------------------------------------------------------
SD Card Data: N/A
-----------------------------------------------------------------------

This command requests a firmware update file (specifically "meteor.fup") from the SD card if it exists. May be similar to the Check For Key File command on the Play-Yan Micro. If the File Exists Flag from Status Data is zero, the NMP will attempt to open the file and read its contents using additional commands, otherwise it aborts that process immediately.

A total of 522 bytes are used as parameter data, which is simply an ASCII-encoded string for the update file.





-----------------------------------------------------------------------
Command 0x0301 - Read Firmware File
-----------------------------------------------------------------------
Parameters : N/A
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4301
Byte 0x0002 - 0x0003	File Opened Flag	0x00 = Opened, 0x01 = Not Opened
Byte 0x0008 - 0x0009	File Size
-----------------------------------------------------------------------
SD Card Data:

Byte 0x0000 - Size	File Contents
-----------------------------------------------------------------------

This command appears to read the firmware file if it exists. The File Opened Flag determines whether or not the file was successfully opened. If that is the case, the contents of the file are available to read via the SD Card interface. The File Size determines how many bytes should be read from the SD Card. Note that while the File Size can be read as a 32-bit value, the NMP software forcibly masks it to 16-bits.





-----------------------------------------------------------------------
Command 0x0303 - Close Firmware File
-----------------------------------------------------------------------
Parameters : N/A
-----------------------------------------------------------------------
Status Data :

Byte 0x0000 - 0x0001	Command ID		0x4303
-----------------------------------------------------------------------
SD Card Data: N/A
-----------------------------------------------------------------------

This command appears to close the firmware file if it was previously opened.



***************************************************
7. Firmware Update
***************************************************

The NMP apparently has the ability to update its built-in firmware. After loading the default firmware from ROM, it will search for an update file called "meteor.fup". This functionality is similar to the original Play-Yan that expanded its features (such as MP4 support). Strangely enough, it seems no such firmware update file was ever published by Nintendo. The NMP manual makes no mention of this functionality either. Currently, it remains unknown what sort of upgrades any new firmware might have brought or why Nintendo decided to leave upgrades as a future option. At any rate, it is completely unused at this time.

One interesting detail is that the maximum file size for firmware was supposed to be 65,536 bytes. This is significantly lower than the only known firmware update given for original Play-Yan, which came in around 554KB. The firmware for the NMP was likely far less complicated, perhaps as a result of the hardware lacking any video decoding and focusing exclusively on audio processing.

 